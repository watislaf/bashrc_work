# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

PATH=/5g/tools/llvm/12.0_034/bin:$PATH


source ~/.fzf.bash

export LANG=en_US.UTF-8
export http_proxy=http://defra1c-proxy.emea.nsn-net.net:8080
export https_proxy=$http_proxy
export ftp_proxy=$http_proxy
export no_proxy=localhost,127.0.0.0/8,10.0.0.0/8,*.local,nsn-net.net,inside.nokiasiemensnetworks.com,access.nokiasiemensnetworks.com,nsn-intra.net,nsn-rdnet.net,int.net.nokia.com,nesc.nokia.net

gGNB_PATH=/var/fpwork/kozulin/gnb

gBUILD_PATH=$gGNB_PAHT"/uplane/build/l2_ps"
gBUILD_UT_PATH=$gBUILD_PATH"/ut_build"

function ghp {
  echo "--------------- Basics ---------------"

  echo " goFastGrep -word_to_find ->gfg"
  function gfg() {
    if [ "$1" == "" ]; then
      echo provide word to find
      return
    fi
    fgrep --color=auto -riInH "$1" ./
  }

  echo "goGnb -> ggb"
  function ggb() {
    cd $gGNB_PATH
  }

  echo "goRuN -> grn"
  function ggb() {
    cd $gGNB_PATH/uplane/L2-PS/run
  }


  echo "goSourCe -> ggb"
  function gsc() {
    cd $gGNB_PATH/uplane/L2-PS/src/
  }

  echo "goUplane -> gue"
  function gue {
    cd ${gGNB_PATH}/uplane
  }

  echo "goClion -> gcn"
  function gcn() {
    /var/fpwork/kozulin/clion-2021.3/bin/clion.sh >/dev/null 2>&1 &
  }

  echo "go vim - gvm"
  function gvm() {
    vim -c 'set ic' $1
  }
  echo "-------------- Build--------------"

  echo "go clean all -> gca"
  function gca() { 
    ggb
    git clean -xfd
    rm -rf uplane/sdkuplane/cache/
    rm -rf externals/integration
    git restore externals/
    gse
  }

 echo "go source -> gse"
 function gse(){
    ggb
    gpl
    gpl 
    # ./buildscript/universal/run_nb_scripts.sh
   # prepare-5g-env 
   # gpl
   # gpl
    cd uplane
    source ./L2-PS/run/prepareShell.sh
    cd -
}

   echo "go reinstall all -> gra"
   function gra(){
	
    cd /var/fpwork/
    mkdir kozulin
    cd kozulin
    rm -rf tmp
    mkdir tmp
    rm -rf gnb
    git clone ssh://kozulin@gerrit-wrsl1.int.net.nokia.com:29418/MN/5G/NB/gnb 
    scp -p -P 29418 kozulin@gerrit-wrsl1.int.net.nokia.com:hooks/commit-msg gnb/.git/hooks/ 
    cd ./gnb 
    gse
    export PARALLEL_BUILD_JOBS=$(($(nproc)/2))
        
  }

  echo "---------------Tmux---------------"
  echo "go tmux sct-> gtx"
  function gtx() {
    ~/local/bin/tmux attach-session -t 0
  }
   

  echo "---------------Fuse---------------"
  echo "go build SctFuse 0 -> gbF0"
  function gbF0() {
    gse
    ggb
    ./uplane/buildscript/L2-PS/run build_host --extra_cmake_flags "-DCMAKE_BUILD_TYPE=Debug" --icecc
    ./uplane/buildscript/L2-PS/run sct_build --for-fuse-host --icecc
  }

  echo "go rebuild Fuse test -d to debug( NO MATCH) > grF"
  function grF() {
    ggb
    if [ "$1" == "" ]; then
      echo provide word to find
      return
    fi 
    gbF $1  && ./uplane/sct/run_on_asik/SRunner.py host --l2ps -t $1 --test-type fuse $2   -j 11  
   
    cd -
  }
	
  echo "go test Fuse -d to debug  (MATCH) > gtF"
  function gtF() {
      ggb && ./uplane/sct/run_on_asik/SRunner.py host --l2ps --match $1 --test-type fuse $2    -j 11  && cd -
  }

  echo "go build Fuse test > gbF"
  function gbF() {
    ggb
    if [ "$1" == "" ]; then
      echo provide word to find
      return
    fi 
    ninja -j $PARALLEL_BUILD_JOBS -C ./uplane/build/tickler/ $1
    cd -
  }


  echo "go find SctFuse -> gfF "
  function gfF() {
    ggb
    if [ $1 == "" ]; then
      echo provide name of the test
      return 0
    fi
    ninja -C ./uplane/build/tickler/ -t targets | grep --color=auto ^$1
    cd -
  }

  echo "go clean logs -> gcl"
  function gcl() {
    ggb
    rm -rf ./uplane/logs
    rm -rf ./logs
    cd -
  }

  echo "-------------------SCT---------------"
  echo "go build Sct0 -> gbS0"
  function gbS0() {
    ggb
    gse
   cd ./uplane/
    ./buildscript/L2-PS/run build_host --extra_cmake_flags "-DCMAKE_BUILD_TYPE=Debug" --icecc
    ./buildscript/L2-PS/run sct_build --icecc 
    # ./L2-PS/run/buildL2ps.sh --icecc --only_sct_binary !!
  }

  echo "go test Sct -d to debbug-> gtS "
  function gtS() {
    ggb
    if [ "$1" == "" ]; then
      echo provide word to find
      return
    fi
    ninja -j $PARALLEL_BUILD_JOBS -C ./uplane/build/tickler/ $1
    ./uplane/sct/run_on_asik/SRunner.py host --l2ps --match $1 $2   -j 11 
    cd -
  }
   
  echo "go find Sct> gfS "
  function gfS() {
    ggb
    if [ $1 == "" ]; then
      echo provide name of the test
      return 0
    fi
    ninja -C ./uplane/build/tickler/ -t targets | grep --color=auto ^$1
    cd -
  }

  echo "-------------------UT---------------"
  echo "go build Ut0 -> gbU0"
  function gbU0() {
    ggb
    gse
    ggb
    ./uplane/L2-PS/run/ut/build_all_ut_icecc.sh
#    ./buildscript/L2-PS/run ut_build --extra_cmake_flags "-DCMAKE_BUILD_TYPE=Debug" --icecc  
   }

  echo "go test Ut -> gtT name"
  function gtT() {
    if [ $1 == "" ]; then
      echo provide name of the test
      return 0
    fi
    gue
    ./buildscript/L2-PS/run ut_build --extra_cmake_flags "-DCMAKE_BUILD_TYPE=Debug" --icecc;
    cd build/l2_ps/ut_build/
    ninja $1
    ctest --output-on-failure -j 22 . -R  $1;
    cd -
  }

  echo "go find Ut -> gfT name"
  function gfT() {
    if [ $1 == "" ]; then
      echo provide name of the test
      return 0
    fi
    gue
    ninja -C build/l2_ps/ut_build/ -t targets | grep $1
    cd -
  }

  echo "------------- Git ---------------- "

  echo "go pull recursive => gpl"
  function gpl {
    git pull --ff-only
    git submodule sync --recursive
    git submodule update --init --recursive
  }

  echo "go commit head => gch"
  function gch {
    ggb
    git diff --name-only | egrep --color=auto "(*.cpp|*.hpp|*.h)" | xargs -I % -n 1 sh -c 'clang-format -i %'
    git commit --amend --no-edit --reset-author
    git push origin HEAD:refs/for/master
   cd -
  }
}


function prepare-5g-env() {
  export CCACHE_DIR=/var/fpwork/ccache # common ccache for all users on server (faster compilation)
  export CCACHE_ENABLE=1
  export CCACHE_PREFIX=icecc
  export CCACHE_PREFIX_CPP=icecc
  export CCACHE_UMASK=002 # allows to share ccache with other users - for CCACHE_DIR=/var/fpwork/ccache only
  export PARALLEL_BUILD_JOBS=$(($(nproc) / 2))
  export CCACHE_MAXSIZE=100G
  export CCACHE_DEPEND=1
  export CCACHE_SLOPPINESS=pch_defines,time_macros
  export ICECC_REMOTE_CPP=1
  export BB_ENV_EXTRAWHITE+=' CCACHE_DEPEND CCACHE_SLOPPINESS ICECC_REMOTE_CPP'
  export GNB_CCACHE_ENABLED=true
  export ICECC_TEST_REMOTEBUILD=1
  source /var/fpwork/$USER/gnb/set_gnb_env.sh
}

ghp
echo $DISPLAY > ~/.tmp42.txt
gtx
ggb
export DISPLAY=$(cat ~/.tmp42.txt) 

TMPDIR=/var/fpwork/$USER/tmp
TMP=$TMPDIR
TEMP=$TMPDIR
export TMPDIR TMP TEMP
if [[ ! -e $TMP ]]; then
  mkdir $TMP
fi

git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \[\033[00;32m\]\$(git_branch)\[\033[00m\]\$ "

function start() {
 export GIT_PS1_SHOWUNTRACKEDFILES=falsenano 
 export GIT_PS1_SHOWCOLORHINTS=true
 export GIT_PS1_SHOWDIRTYSTATE=true
 export PROMPT_COMMAND='__git_ps1 "\n($DISPLAY) \[\033[32;33m\]\u@\h: \[\033[0m\]\[\033[01;34m\]\w\[\033[0m\]" "\nλ "'
 
 source "${HOME}/bash/bash_completion"
 source "${HOME}/bash/git-prompt.sh"
 source "${HOME}/bash/ninja-bash-completion"

}
# ./uplane/buildscript/L2-PS/run build_host --extra_cmake_flags "-DCMAKE_BUILD_TYPE=Debug" --icecc


    ggb;
    gse;
    ggb;
    cd ./uplane/L2-PS/run;
    ./buildL2ps.sh;
    ./ut/build_all_ut_icecc.sh
  